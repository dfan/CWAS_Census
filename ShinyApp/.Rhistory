replicate(5, rbind(rbinom(n = 10, size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015))))
rbinom(n = 2, size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015))
rbinom(n = 10, size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015))
replicate(5, rbind(rbinom(n = 10, size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015))))
replicate(5, rbinom(n = 10, size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015)))
?replicate
t(replicate(5, rbinom(n = 10, size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015))))
simulateDiabeticCohort <- function(n) {
# transpose
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 1
comorbidities <- simulateComorbid(n)
mat$i401 <- comorbidities[1,]
mat$i362.0 <- comorbidities[2,]
mat$i411 <- comorbidities[3,]
mat$i410 <- comorbidities[4,]
mat$i428 <- comorbidities[5,]
return(mat)
}
simulateDiabeticCohort(1000)
diabICD9s <- simulateDiabeticCohort(1000)
simulateControlCohort <- function(n) {
# not-discrete so don't do Gaussian noises
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.1)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 0
return(mat)
}
simulateControlCohort(1000)
normICD9s <- simulateControlCohort(1000)
normICD9s
names(diabICD9s)
names(normICD9s)
sum(normICD9s[1,])
simulateControlCohort <- function(n) {
# not-discrete so don't do Gaussian noises
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.01)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 0
return(mat)
}
normICD9s <- simulateControlCohort(1000)
sum(normICD9s[1,])
simulateControlCohort <- function(n) {
# not-discrete so don't do Gaussian noises
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.001)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 0
return(mat)
}
normICD9s <- simulateControlCohort(1000)
sum(normICD9s[1,])
sum(normICD9s[2],])
sum(normICD9s[2,])
sum(normICD9s[3,])
simulateControlCohort <- function(n) {
# not-discrete so don't do Gaussian noises
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.0001)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 0
return(mat)
}
normICD9s <- simulateControlCohort(1000)
simulateControlCohort <- function(n) {
# not-discrete so don't do Gaussian noises
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.00015)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 0
return(mat)
}
normICD9s <- simulateControlCohort(1000)
sum(normICD9s[3,])
sum(normICD9s[2,])
sum(normICD9s[1,])
apply(normICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
normICD9s <- simulateControlCohort(1000)
oddsRatio <- function(case, control) {
# convert everything to be categorical
combo <- lapply(rbind(case, control), as.factor)
#case <- lapply(case[, c("i401", "i362.0", "i411", "i410", "i428")], as.factor)
#control <- lapply(control[, c("i401", "i362.0", "i411", "i410", "i428")], as.factor)
#combo <- as.data.frame(lapply(rbind(case, control), as.factor))
logReg <- glm(combo$i250 ~ combo$i401 + combo$i362.0 + combo$i411 + combo$i410 + combo$i428, data = combo, family = "binomial")
# ~. or !names(combo) == "i250"
#caseLR <- glm(case$i250 ~ case$i401 + case$i362.0 + case$i411 + case$i410 + case$i428, data = case, family = "binomial")
#controlLR <- glm(control$i250 ~ control$i401 + control$i362.0 + control$i411 + control$i410 + control$i428, data = control, family = "binomial")
# reverse the log to get odds-ratio
#exp(coef(caseLR))
#exp(coef(controlLR))
exp(coef(logReg))
}
oddsRatio(simulateDiabeticCohort(5000), simulateControlCohort(5000))
oddsRatio(simulateDiabeticCohort(1000), simulateControlCohort(1000))
sum(simulateDiabeticCohort(100)[1, ])
sum(simulateControlCohort(100)[1, ])
oddsRatio(simulateDiabeticCohort(1000), simulateControlCohort(1000))
system.time(simulateDiabeticCohort(2000))
system.time(simulateControlCohort(2000))
system.time(oddsRatio(simulateDiabeticCohort(1000), simulateControlCohort(1000)))
oddsRatio(simulateDiabeticCohort(1000), simulateControlCohort(1000))
oddsRatio(simulateDiabeticCohort(5000), simulateControlCohort(5000))
apply(diabICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
normICD9s <- simulateControlCohort(1000)
apply(normICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
normICD9s <- simulateControlCohort(1000)
# 2 means to columns
apply(normICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
sum(simulateDiabeticCohort(100)[1, ])
sum(simulateControlCohort(1000)[1, ])
sum(simulateDiabeticCohort(1000)[1, ])
apply(simulateDiabeticCohort(1000), 1, mean)
mean(simulateDiabeticCohort(1000))
mean(as.matrix(simulateDiabeticCohort(1000))
mean(as.matrix(simulateDiabeticCohort(1000)))
mean(as.matrix(simulateDiabeticCohort(1000)))
sum(as.matrix(simulateDiabeticCohort(1000))) / 1000
sum(as.matrix(simulateControlCohort(1000))) / 1000
colnames(a)
class(colnames(a)[1:5])
a <- simulateDiabeticCohort(5)
a[1:5, 1:5]
colnames(a)
class(colnames(a)[1:5])
sum(as.matrix(simulateDiabeticCohort(1000))) / 1000
sum(as.matrix(simulateControlCohort(1000))) / 1000
sum(as.matrix(simulateDiabeticCohort(1000))) / 1000
sum(as.matrix(simulateControlCohort(1000))) / 1000
simulateDiabeticCohort <- function(n) {
# transpose to n x nrow(df)
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.0001)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 1
comorbidities <- simulateComorbid(n)
mat$i401 <- comorbidities[1,]
mat$i362.0 <- comorbidities[2,]
mat$i411 <- comorbidities[3,]
mat$i410 <- comorbidities[4,]
mat$i428 <- comorbidities[5,]
return(mat)
}
diabICD9s <- simulateDiabeticCohort(1000)
# apply mean() to columns (denoted by 2) to double-check probabilities add up right
apply(diabICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
# Control has no diabetics
simulateControlCohort <- function(n) {
# not-discrete so don't do Gaussian noises
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.0001)))))
names(mat) <- paste("i", df$icd9, sep = "")
mat$i250 <- 0
return(mat)
}
sum(as.matrix(simulateDiabeticCohort(1000))) / 1000
sum(as.matrix(simulateControlCohort(1000))) / 1000
oddsRatio(simulateDiabeticCohort(5000), simulateControlCohort(5000))
oddsRatio(simulateDiabeticCohort(2500), simulateControlCohort(2500))
summary(diabICD9s)
dim(diabICD9s)
dim(normICD9s)
nrow(df)
ls()
hist(diabICD9s$i401)
hist(diabICD9s$i401, breaks = 2)
boxplot(diabICD9s$i402.1)
boxplot(diabICD9s$i401)
plot(diabICD9s$401, diabICD9s$250)
plot(diabICD9s$401, diabICD9s$411)
qqnorm(diabICD9s)
qqnorm(diabICD9s$401)
numberWhite <- rhyper(30,4,5,3)
numberChipped <- rhyper(30,2,7,3)
smoothScatter(numberWhite,numberChipped)
diabICD9s <- simulateDiabeticCohort(1000)
head(diabICD9s)
dim(diabICD9s)
diabICD9s[1:5, 1:5]
apply(diabICD9s, 1, sum)
hist(apply(diabICD9s, 1, sum))
simulateComorbid <- function(n) {
# one-coin flip for each comorbidity, rows of data frame are people
# vectorized to remove for-loop
return(sapply(runif(n), function(x) rbinom(n = 5, size = 1,c(0.77, 0.3, 0.2, 0.3, 0.4) * (x > 0.5) + c(0.57, 0.1, 0, 0.1, 0.2) * (x < 0.5))))
}
# hypertension(401), retinopathy(362.0), coronary heart disease(411), myocardial infarction(410), congestive heart failure(428)
# vectorized for speed
simulateDiabeticCohort <- function(n) {
# transpose to n x nrow(df)
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = 1, rtruncnorm(1, a = 0, b = 1, mean = 0.1, sd = 0.01)))))
names(mat) <- paste("i", df$icd9, sep = "")
# everyone in the case group is a diabetic.
mat$i250 <- 1
comorbidities <- simulateComorbid(n)
mat$i401 <- comorbidities[1,]
mat$i362.0 <- comorbidities[2,]
mat$i411 <- comorbidities[3,]
mat$i410 <- comorbidities[4,]
mat$i428 <- comorbidities[5,]
return(mat)
}
diabICD9s <- simulateDiabeticCohort(1000)
hist(apply(diabICD9s, 1, sum))
head(diabICD9s)
diabICD9s[1:5, 1:5]
diabICD9s$i250
normICD9s <- simulateControlCohort(1000)
normICD9s$i250
apply(normICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
apply(diabICD9s[ , c("i401", "i362.0", "i411", "i410", "i428")], 2, mean)
comorbidities
simulateComorbid(5)
simulateComorbid(10)
oddsRatio(simulateDiabeticCohort(2500), simulateControlCohort(2500))
logReg
oddsRatio(simulateDiabeticCohort(1000), simulateControlCohort(1000))
oddsRatio <- function(case, control) {
# convert to factor because data is categorical and discrete
combo <- lapply(rbind(case, control), as.factor)
#case <- lapply(case[, c("i401", "i362.0", "i411", "i410", "i428")], as.factor)
#control <- lapply(control[, c("i401", "i362.0", "i411", "i410", "i428")], as.factor)
#combo <- as.data.frame(lapply(rbind(case, control), as.factor))
logReg <- glm(combo$i250 ~ combo$i401 + combo$i362.0 + combo$i411 + combo$i410 + combo$i428, data = combo, family = "binomial")
# ~. or !names(combo) == "i250"
#caseLR <- glm(case$i250 ~ case$i401 + case$i362.0 + case$i411 + case$i410 + case$i428, data = case, family = "binomial")
#controlLR <- glm(control$i250 ~ control$i401 + control$i362.0 + control$i411 + control$i410 + control$i428, data = control, family = "binomial")
# reverse the log to get odds-ratio
#exp(coef(caseLR))
#exp(coef(controlLR))
exp(coef(logReg))
return logReg
}
oddsRatio <- function(case, control) {
# convert to factor because data is categorical and discrete
combo <- lapply(rbind(case, control), as.factor)
#case <- lapply(case[, c("i401", "i362.0", "i411", "i410", "i428")], as.factor)
#control <- lapply(control[, c("i401", "i362.0", "i411", "i410", "i428")], as.factor)
#combo <- as.data.frame(lapply(rbind(case, control), as.factor))
logReg <- glm(combo$i250 ~ combo$i401 + combo$i362.0 + combo$i411 + combo$i410 + combo$i428, data = combo, family = "binomial")
# ~. or !names(combo) == "i250"
#caseLR <- glm(case$i250 ~ case$i401 + case$i362.0 + case$i411 + case$i410 + case$i428, data = case, family = "binomial")
#controlLR <- glm(control$i250 ~ control$i401 + control$i362.0 + control$i411 + control$i410 + control$i428, data = control, family = "binomial")
# reverse the log to get odds-ratio
#exp(coef(caseLR))
#exp(coef(controlLR))
exp(coef(logReg))
return(logReg)
}
oddsRatio(simulateDiabeticCohort(1000), simulateControlCohort(1000))
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
df[30113,]
data]30114,
data[30113, ]
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2010", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
# data frame must have one column called "region" and another called "value"
df <- as.data.frame(cbind(data$county, data$medianincome))
names(df) <- c("region", "value")
# remove leading zeros from FIP codes. Choropleth requires numeric column type in dataframe
df$region <- as.numeric(sapply(df$region, function(y) sub('^0+([1-9])', '\\1', y)))
df[30113,]
df[30114,]
library(dpyr)
library(dplyr)
filter(df, county = 30113)
filter(df, county == 30113)
head(df)
filter(df, region == 30113)
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
shiny::runApp('~/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp')
library(RMySQL)
library(truncnorm)
# set to your directory
setwd("/Users/dfan/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp")
# code modified from phewas.R to be for county populations, not individuals
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "PheWAS", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
df <- dbReadTable(conn = con, name = "data")
dbDisconnect(con)
simulateControlCohort <- function(n, countyPop) {
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = countyPop, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.0001)))))
names(mat) <- paste("i", df$icd9, sep = "")
# all are non-diabetic
mat$i250 <- 0
return(mat)
}
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2000", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data2000 <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2010", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data2010 <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
county1 <- as.data.frame(rbind(t(sapply(data2000$population[1:10], function(y) as.numeric(simulateControlCohort(1, y))))))
county1 <- cbind(data2000$county[1:10], county1)
names(county1) <- c('STCOU', names(simulateControlCohort(1,1)))
dim(county1)
head(county1)
county1[1:5, 1:5]
library(RMySQL)
shiny::runApp()
shiny::runApp()
float(1/5)
?round
shiny::runApp()
shiny::runApp()
round(1/5, 2)
round(1/500, 2)
round(1/500, 10)
shiny::runApp()
2/40000
data2000$population[1:2]
county1[1,1]
count1[2,2,]
count1[2,2]
county1[2,2]
8/45000
a
shiny::runApp()
shiny::runApp()
a = [c(1,2,3), c(1,2,3)]
a = as.data.frame(c(1,2,3), c(1,2,3))
a
a = as.data.frame(c(1,2,3))
a
a = matrix(c(1,2,3), c(1,2,3))
a
?data.frame
a = as.data.frame(cbind(c(1,2,3), c(1,2,3))
a
a = as.data.frame(cbind(c(1,2,3), c(1,2,3)))
a
b = c(100, 100, 100)
apply(a, 2, function(y) y / b)
b = c(100000, 100000, 100000)
apply(a, 2, function(y) y / b)
a
a < -apply(a, 2, function(y) y / b)
a <- apply(a, 2, function(y) y / b)
a <- apply(a, 2, function(y) y / b)
a
1 /100000000000000
1 /10000000000000000000000000000000000000000000000000000000
a[, -1] <- apply(a[, -1], 2, function(y) y / b)
a[, -1] <- apply(a[, -1], 2, function(y) y / b)
a
a[, -1]
class(a[, -1])
a <- cbind(a, c(100, 2000, 10))
a
class(a[, -1])
a[, -1] <- apply(a[, -1], 2, function(y) y / b)
a
shiny::runApp()
c <- ''
shiny::runApp()
shiny::runApp()
?apply
data$population[5]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
c = [1,2,3]
c = c(1,2,3)
d = c(2,2,2)
c / d
apply(a, 2, a)
apply(a, 2, function(y) y + 1)
apply(a, 2, function(y) y + 1)
a< -apply(a, 2, function(y) y + 1)
a <- apply(a, 2, function(y) y + 1)
a <- apply(a, 2, function(y) y + 1)
a
a <- apply(a, 2, function(y) y + 1)
a
data2000$population[1:5]
a / data2000$population[1:5]
a / data2000$population[1:3]
a = as.data.frame(cbind(c(10, 20, 30), c(15, 25, 35)))
a
a <- a / data2000$population[1:length(a[, 1])]
a
data2000$population[1:3]
10 / 43671
15 / 43671
20 / 140415
shiny::runApp()
shiny::runApp()
?float
?round
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
round(1/7, 5)
round(1/7, 10)
shiny::runApp()
a
round(a * 2, 2)
round(a * 2, 10)
shiny::runApp()
?read.csv
a <- read.csv(blah.csv, TRUE, sep = ",", quote - """)
a
)
()
(;)
;
''
+
,
""
a <- read.csv(blah.csv, TRUE, sep = ",")
a <- read.csv('blah.csv', TRUE, sep = ",")
a
head(a)
class(a)
a$i008.01
class(a$i008.001)
class(a$i008.01)
class(as.numerical(a$i008.01))
class(as.numeric(a$i008.01))
class(data2000$population)
class(1)
class(1 * 1.0)
shiny::runApp()
d = c(1,2,3)
as.numeric(d)
d <- as.numeric(d)
d
class9d
class(d)
shiny::runApp()
?tableOutput
shiny::runApp()
shiny::runApp()
?renderTable
format(a, scientific = TRUE)
a
a / 100
format(a / 100, scientific = TRUE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
?dataTableOutput
shiny::runApp()
shiny::runApp()
library(RMySQL)
library(truncnorm)
# set to your directory
setwd("/Users/dfan/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp")
# code modified from phewas.R to be for county populations, not individuals
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "PheWAS", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
df <- dbReadTable(conn = con, name = "data")
dbDisconnect(con)
simulateControlCohort <- function(n, countyPop) {
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = countyPop, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.001)))))
names(mat) <- paste("i", df$icd9, sep = "")
# all are non-diabetic
mat$i250 <- 0
return(mat)
}
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2000", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data2000 <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2010", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data2010 <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
county1 <- as.data.frame(rbind(t(sapply(data2000$population[1:10], function(y) as.numeric(simulateControlCohort(1, y))))))
county1 <- cbind(data2000$county[1:10], county1)
names(county1) <- c('STCOU', names(simulateControlCohort(1,1)))
write.table(county1, file = "blah.csv", sep = ",")
county2 <- as.data.frame(rbind(t(sapply(data2010$population, function(y) as.numeric(simulateControlCohort(1, y))))))
library(RMySQL)
library(truncnorm)
# set to your directory
setwd("/Users/dfan/Dropbox/Research Lab Projects/Undergraduate/Harvard-MIT 2016/Code/CWAS_Census/ShinyApp")
# code modified from phewas.R to be for county populations, not individuals
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "PheWAS", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
df <- dbReadTable(conn = con, name = "data")
dbDisconnect(con)
simulateControlCohort <- function(n, countyPop) {
mat <- as.data.frame(t(replicate(n, rbinom(n = nrow(df), size = countyPop, rtruncnorm(1, a = 0, b = 1, mean = 0, sd = 0.001)))))
names(mat) <- paste("i", df$icd9, sep = "")
# all are non-diabetic
mat$i250 <- 0
return(mat)
}
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2000", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data2000 <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
con <- dbConnect(MySQL(), user = "root", password = "root", dbname = "census2010", unix.sock="/Applications/MAMP/tmp/mysql/mysql.sock")
data2010 <- dbReadTable(conn = con, name = "acs")
dbDisconnect(con)
county1 <- as.data.frame(rbind(t(sapply(data2000$population, function(y) as.numeric(simulateControlCohort(1, y))))))
county1 <- cbind(data2000$county, county1)
names(county1) <- c('STCOU', names(simulateControlCohort(1,1)))
write.table(county1, file = "blah.csv", sep = ",")
county2 <- as.data.frame(rbind(t(sapply(data2010$population, function(y) as.numeric(simulateControlCohort(1, y))))))
county2 <- cbind(data2000$county, county2)
names(county2) <- c('STCOU', names(simulateControlCohort(1,1)))
write.table(county2, file = "testFile2.csv", sep = ",")
